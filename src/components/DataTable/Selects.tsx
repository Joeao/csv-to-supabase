import { useContext, type JSX } from "react";

import DataContext from "@/context/Data.context";

import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";

interface Props {
	header: string;
	foreignKeys: string[];
}

const TableSummary = (props: Props): JSX.Element => {
	const data = useContext(DataContext);

	// Each handled similarly - no data will be assigned
	const defaultHeaders = ["auto_generated", "not_set", "foreign_key"];

	// Commonly auto-generated column names, can be overwritten by user
	const autoGenerated = ["id", "created_at", "updated_at"];

	const renderSelectItems = (): JSX.Element => {
		return (
			<SelectContent>
				{[...defaultHeaders, ...data.headers].flatMap((val) => {
					if (!val?.length) {
						return [];
					}

					return (
						<SelectItem
							value={val}
							key={val}
						>
							{val}
						</SelectItem>
					);
				})}
			</SelectContent>
		);
	};

	const defaultVal = autoGenerated.includes(props.header) ? "auto_generated" : props.foreignKeys.includes(props.header) ? "foreign_key" : "not_set";

	return (
		<Select
			defaultValue={defaultVal}
			onValueChange={(newVal) => {
					const headerIndex = data.mapping.findIndex((el) => el[0] === props.header);

					if (headerIndex === -1) {
						data.setMapping([
							...data.mapping,
							[props.header, newVal, []],
						]);
					} else {
						const newMapping = [...data.mapping];
						newMapping[headerIndex] = [props.header, newVal, data.mapping[headerIndex][2]];

						data.setMapping(newMapping);
					}
				}}
		>
			<SelectTrigger>
				<SelectValue placeholder={defaultVal} />
			</SelectTrigger>

			{renderSelectItems()}
		</Select>
	);
};

export default TableSummary;
